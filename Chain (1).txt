1.Verify digital signature

package sha;

import java.security.*;
import java.util.*;

public class sha1 {
	

	public static void main (String args[])throws Exception{
	Scanner sc=new Scanner(System.in);
	KeyPairGenerator keypairGen = KeyPairGenerator.getInstance("DSA");
	keypairGen.initialize(2048);
	KeyPair pair = keypairGen.generateKeyPair();
	PrivateKey privKey = pair.getPrivate();
	Signature sign =  Signature.getInstance("SHA256withDSA");
	sign.initSign(privKey);

	System.out.println("Enter first String: ");
	String s1=sc.nextLine();
	byte[] bytes =s1.getBytes();
	sign.update(bytes);
	byte[] signature=sign.sign();
	sign.initVerify(pair.getPublic());

	System.out.println("Enter second String: ");
	String s2=sc.nextLine();
	bytes =s2.getBytes();
	sign.update(bytes);
	boolean bool = sign.verify(signature);
	if(bool){
	System.out.println("signature verified");
	}
	else
	{
	System.out.println("signature failed");
	}
	}
	}



2.SHA hasing algorithm


package no1;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

public class pgm1 {
	
	
	public static String getSHA(String input)
	{
	try {
	MessageDigest md = MessageDigest.getInstance("SHA-256");

	byte[] messageDigest = md.digest(input.getBytes());
	BigInteger no = new BigInteger(1, messageDigest);
	String hashtext = no.toString(16);

	while (hashtext.length() < 32) {
	hashtext = "0" + hashtext;
	}
	return hashtext;
	}
	catch (NoSuchAlgorithmException e) {
	System.out.println("exception thrown"+ " for incorrect algorith" +e);
	return null;
	}
	}

	public static void main(String args[])
	{
	Scanner sc=new Scanner(System.in);
	System.out.println("HashCode Generated by SHA-256 for: ");

	System.out.println("Enter first string: ");
	String s1 = sc.next();
	System.out.println("\n"+s1+" : " + getSHA(s1));

	System.out.println("\nEnter second string: ");
	String s2 = sc.next();
	System.out.println("\n"+s2+" : " + getSHA(s2));

	System.out.println("\nEnter third string: ");
	String s3 = sc.next();
	System.out.println("\n"+s3+" : " + getSHA(s3));

	}
	}



3.calculator


pragma solidity ^0.5.0;
contract Calculator {
        
    function add(int a, int b) public pure returns (int){
        return (a+b);
    }
        function sub(int a, int b) public pure returns (int){
        return (a-b);
    }
        function mul(int a, int b) public pure returns (int){
        return (a*b);
    }
        function div(int a, int b) public pure returns (int){
        return (a/b);
    }
    }


4.Stack


pragma solidity ^0.4.21;

contract Stack {
   uint[] stack;

    function push(uint data) public {
        stack.push(data);
    }

    function pop() public view returns (uint data) {
        data = stack[stack.length - 1];

        
        
    }
}


5.Bank


pragma solidity 0.4.25;
contract Bank
{
    int bal;
    constructor() public
    {
        bal = 0;
    }
    
    function getbalance() view public returns(int)
    {
        return bal;
    }
    function withdraw(int amt) public
    {
        bal = bal -amt;
    }
    function deposit(int amt) public
    {
        bal = bal + amt;
    }
}


6.Election


pragma solidity ^0.4.18;
contract Election {
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    mapping(address => bool) public voters;
    mapping(uint => Candidate) public candidates;
    uint public candidatesCount;
    event votedEvent (
        uint indexed _candidateId
    );

    function Election () public {
        addCandidate("KamalHaasan");
        addCandidate("RajniKanth");
    }

    function addCandidate (string _name) private {
        candidatesCount ++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
    }

    function vote (uint _candidateId) public {
        require(!voters[msg.sender]);
        require(_candidateId > 0 && _candidateId <= candidatesCount);

        voters[msg.sender] = true;
        candidates[_candidateId].voteCount ++;
        votedEvent (_candidateId);
    }
}


7.pure and view

pragma solidity ^0.5.3;
contract ViewandPure {
    
    uint public x=1;  //state variable
    
    function addTox(uint y) public view returns(uint){
    return x+y;
}

/*function updateX() public view {
    x+=1;
} */

function add(int p, int q) public pure returns (int){
        return (p+q);
    } 
}


test  case

pragma solidity ^0.4.24;
contract Calculator{
    int private lastvalue=0;
    function add(int a, int b) public returns(int )
    {
        lastvalue=a+b;
        return lastvalue;
    }
    function sub(int a, int b) public returns(int )
    {
        lastvalue=a-b;
        return lastvalue;
}
    function lastoperation() public constant returns(int )
    {
        
        return lastvalue;
    }
}



// SPDX-License-Identifier: GPL-3.0
        
pragma solidity >=0.4.22 <0.9.0;


import "remix_tests.sol"; 


import "remix_accounts.sol";
import "../calcy.sol";


contract testSuite {

    
    function check1() public {
        Calculator a = new Calculator();
        
        Assert.equal(a.add(2,3),5, "Sucess");
    }
    

     function check2() public {
        Calculator a = new Calculator();
        
        Assert.equal(a.add(5,6),12, "Fail");
    }
    function check3() public {
        Calculator a = new Calculator();
        
        Assert.equal(a.add(5,6),12, "Fail");
    }
}


ganche cli and tuffle

Step1:  (i)Download Nodejs
            (ii)Cut paste into a folder (ex)and mention the path till ex when installing Nodejs.
           (iii) open cmd and check for version of Nodejs/npm, use the command [node -v or npm -v]
Step 2: Install truffle globally on your machine [can use same cmd]
Command:  npm install -g truffle
[In case of error try to do same in another cmd or try to install truffle and ganache together using the command: npm install -g ganache-cli truffle    or npm install -g ganache(spacehere)-cli truffle ]
Step 3: Install ganache cli
Command: npm install -g ganache-cli   or ganache(space here)-cli

Step 4:  Once installed make the ganache listen by the command
Command:ganache-cli

This will start up the client and generate 10 accounts for you to use, each with 100 ETH. You should see something like this:
once the ganache is listening, can initialize truffle in another cmd by using 
Step 5: Initialize Truffle
Command: truffle init      [To create a new project in truffle framework]
Step 6: Create Contract
Inside the contracts folder, write the contract in solidity and save it will “Cname.sol”  [all files]
Step 7: compile the contract in truffle
Command: truffle compile
Step 8: Deploy contract in truffle framework
Step 8.1 First need to migrate the contract 
Migration happens in these 3 steps
(i)	Import the smart contract from contracts folder [artifacts.require]
(ii)	Define a function that implements migration step
(iii)	Export this function so that truffle can use it.

Create a file named  “2_deploy_contracts.js”  [all files type] and write the following code 

var calc = artifacts.require("Calculator");
module.exports = function(deployer) {
    deployer.deploy(calc);
    // Additional contracts can be deployed here
}; 
artifacts.require() method
At the beginning of the migration, we tell Truffle which contracts we'd like to interact with via the artifacts.require() method. The name specified should match the name of the contract definition within that source file. Do not pass the name of the source file, as files can contain more than one contract.
module.exports
All migrations must export a function via the module.exports syntax. The function exported by each migration should accept a deployer object as its first parameter.

Step 9: Modify  the file  truffle_config.js , paste the below contents
module.exports={
networks:{
development:{
host:"localhost",
network_id:'*',
port:8545
}}}
The project is developed in the local host node, we have only 1 node here.
Step 10: Truffle migration 
Command: truffle migrate 

To test using truffle
Step 1: Copy the test program for the smart contract (name_test.sol) in the test folder (all files)
Command : truffle test.


https://medium.com/coinmonks/getting-started-with-ethereum-and-building-basic-dapp-ebb681fb3748
https://medium.com/coinmonks/get-started-with-building-ethereum-dapps-and-smart-contracts-d86b9f7bd1c
https://medium.com/coinmonks/creating-deploying-a-smart-contract-using-truffle-framework-ganache-cli-part-2-f2dcf400fbde


Geth


Step 1 Installation and set up
Step 1.1: download latest version of geth 
Step 1.2:  Create a folder in a drive D:/example , unzip or put the installer geth.exe in this folder. Double click it to start installation.
Step 1.3:  Create short cut for geth.exe on desktop, rgt click the shortcut  and go to properties, in target option specify the path as "D:/example \geth.exe" -fast -cache=1024 click apply then click ok.
Step 1.4: Double click shortcut icon to start syncing
Step1. 5: Open command prompt, go to drive path where geth is installed and check version
D:/example>geth version
Step 2:  To create accounts
To check the accounts available
Command: geth account list
Step 2.1 When no accounts are created
Step 2.2 To create a new account
Command: geth account new
Step 3: To import metamask account to geth
3.1 goto metamask ,select an account, click on export private key, copy the key.
3.2 Copy the private key in a notepad,in a folder  then  import the account to geth by providing the path to the key.

To list accounts
Command > personal.listAccounts
1st account is one that created in geth, 2nd is imported from metamask
To check balance
>eth.getBalance(eth.accounts[position])


    
